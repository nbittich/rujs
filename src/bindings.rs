/* automatically generated by rust-bindgen 0.60.1 */

pub const _SETJMP_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigset_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    fn test_field___jmpbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__jmp_buf_tag),
                "::",
                stringify!(__jmpbuf)
            )
        );
    }
    test_field___jmpbuf();
    fn test_field___mask_was_saved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__jmp_buf_tag),
                "::",
                stringify!(__mask_was_saved)
            )
        );
    }
    test_field___mask_was_saved();
    fn test_field___saved_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__jmp_buf_tag),
                "::",
                stringify!(__saved_mask)
            )
        );
    }
    test_field___saved_mask();
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_State {
    _unused: [u8; 0],
}
pub type js_Alloc = ::std::option::Option<
    unsafe extern "C" fn(
        memctx: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type js_Panic = ::std::option::Option<unsafe extern "C" fn(J: *mut js_State)>;
pub type js_CFunction = ::std::option::Option<unsafe extern "C" fn(J: *mut js_State)>;
pub type js_Finalize =
    ::std::option::Option<unsafe extern "C" fn(J: *mut js_State, p: *mut ::std::os::raw::c_void)>;
pub type js_HasProperty = ::std::option::Option<
    unsafe extern "C" fn(
        J: *mut js_State,
        p: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type js_Put = ::std::option::Option<
    unsafe extern "C" fn(
        J: *mut js_State,
        p: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type js_Delete = ::std::option::Option<
    unsafe extern "C" fn(
        J: *mut js_State,
        p: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type js_Report = ::std::option::Option<
    unsafe extern "C" fn(J: *mut js_State, message: *const ::std::os::raw::c_char),
>;
extern "C" {
    pub fn js_newstate(
        alloc: js_Alloc,
        actx: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    ) -> *mut js_State;
}
extern "C" {
    pub fn js_setcontext(J: *mut js_State, uctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn js_getcontext(J: *mut js_State) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn js_setreport(J: *mut js_State, report: js_Report);
}
extern "C" {
    pub fn js_atpanic(J: *mut js_State, panic: js_Panic) -> js_Panic;
}
extern "C" {
    pub fn js_freestate(J: *mut js_State);
}
extern "C" {
    pub fn js_gc(J: *mut js_State, report: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_dostring(
        J: *mut js_State,
        source: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_dofile(
        J: *mut js_State,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_ploadstring(
        J: *mut js_State,
        filename: *const ::std::os::raw::c_char,
        source: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_ploadfile(
        J: *mut js_State,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_pcall(J: *mut js_State, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_pconstruct(J: *mut js_State, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_savetry(J: *mut js_State) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn js_endtry(J: *mut js_State);
}
pub const JS_STRICT: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const JS_REGEXP_G: _bindgen_ty_2 = 1;
pub const JS_REGEXP_I: _bindgen_ty_2 = 2;
pub const JS_REGEXP_M: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const JS_READONLY: _bindgen_ty_3 = 1;
pub const JS_DONTENUM: _bindgen_ty_3 = 2;
pub const JS_DONTCONF: _bindgen_ty_3 = 4;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn js_report(J: *mut js_State, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newerror(J: *mut js_State, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newevalerror(J: *mut js_State, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newrangeerror(J: *mut js_State, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newreferenceerror(J: *mut js_State, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newsyntaxerror(J: *mut js_State, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newtypeerror(J: *mut js_State, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newurierror(J: *mut js_State, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_error(J: *mut js_State, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn js_evalerror(J: *mut js_State, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn js_rangeerror(J: *mut js_State, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn js_referenceerror(J: *mut js_State, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn js_syntaxerror(J: *mut js_State, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn js_typeerror(J: *mut js_State, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn js_urierror(J: *mut js_State, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn js_throw(J: *mut js_State);
}
extern "C" {
    pub fn js_loadstring(
        J: *mut js_State,
        filename: *const ::std::os::raw::c_char,
        source: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn js_loadfile(J: *mut js_State, filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_eval(J: *mut js_State);
}
extern "C" {
    pub fn js_call(J: *mut js_State, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_construct(J: *mut js_State, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_ref(J: *mut js_State) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn js_unref(J: *mut js_State, ref_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_getregistry(J: *mut js_State, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_setregistry(J: *mut js_State, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_delregistry(J: *mut js_State, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_getglobal(J: *mut js_State, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_setglobal(J: *mut js_State, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_defglobal(
        J: *mut js_State,
        name: *const ::std::os::raw::c_char,
        atts: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn js_hasproperty(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_getproperty(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn js_setproperty(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn js_defproperty(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        atts: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn js_delproperty(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn js_defaccessor(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        atts: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn js_getlength(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_setlength(J: *mut js_State, idx: ::std::os::raw::c_int, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_hasindex(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_getindex(J: *mut js_State, idx: ::std::os::raw::c_int, i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_setindex(J: *mut js_State, idx: ::std::os::raw::c_int, i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_delindex(J: *mut js_State, idx: ::std::os::raw::c_int, i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_currentfunction(J: *mut js_State);
}
extern "C" {
    pub fn js_pushglobal(J: *mut js_State);
}
extern "C" {
    pub fn js_pushundefined(J: *mut js_State);
}
extern "C" {
    pub fn js_pushnull(J: *mut js_State);
}
extern "C" {
    pub fn js_pushboolean(J: *mut js_State, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_pushnumber(J: *mut js_State, v: f64);
}
extern "C" {
    pub fn js_pushstring(J: *mut js_State, v: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_pushlstring(
        J: *mut js_State,
        v: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn js_pushliteral(J: *mut js_State, v: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newobjectx(J: *mut js_State);
}
extern "C" {
    pub fn js_newobject(J: *mut js_State);
}
extern "C" {
    pub fn js_newarray(J: *mut js_State);
}
extern "C" {
    pub fn js_newboolean(J: *mut js_State, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_newnumber(J: *mut js_State, v: f64);
}
extern "C" {
    pub fn js_newstring(J: *mut js_State, v: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn js_newcfunction(
        J: *mut js_State,
        fun: js_CFunction,
        name: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn js_newcconstructor(
        J: *mut js_State,
        fun: js_CFunction,
        con: js_CFunction,
        name: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn js_newuserdata(
        J: *mut js_State,
        tag: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        finalize: js_Finalize,
    );
}
extern "C" {
    pub fn js_newuserdatax(
        J: *mut js_State,
        tag: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        has: js_HasProperty,
        put: js_Put,
        del: js_Delete,
        finalize: js_Finalize,
    );
}
extern "C" {
    pub fn js_newregexp(
        J: *mut js_State,
        pattern: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn js_pushiterator(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        own: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn js_nextiterator(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn js_isdefined(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isundefined(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isnull(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isboolean(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isnumber(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isstring(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isprimitive(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isobject(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isarray(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isregexp(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_iscoercible(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_iscallable(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_isuserdata(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_toboolean(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_tonumber(J: *mut js_State, idx: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn js_tostring(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn js_touserdata(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn js_trystring(
        J: *mut js_State,
        idx: ::std::os::raw::c_int,
        error: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn js_tointeger(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_toint32(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_touint32(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn js_toint16(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn js_touint16(J: *mut js_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn js_gettop(J: *mut js_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_settop(J: *mut js_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_pop(J: *mut js_State, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_rot(J: *mut js_State, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_copy(J: *mut js_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_remove(J: *mut js_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_insert(J: *mut js_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_replace(J: *mut js_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn js_dup(J: *mut js_State);
}
extern "C" {
    pub fn js_dup2(J: *mut js_State);
}
extern "C" {
    pub fn js_rot2(J: *mut js_State);
}
extern "C" {
    pub fn js_rot3(J: *mut js_State);
}
extern "C" {
    pub fn js_rot4(J: *mut js_State);
}
extern "C" {
    pub fn js_rot2pop1(J: *mut js_State);
}
extern "C" {
    pub fn js_rot3pop2(J: *mut js_State);
}
extern "C" {
    pub fn js_concat(J: *mut js_State);
}
extern "C" {
    pub fn js_compare(J: *mut js_State, okay: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_equal(J: *mut js_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_strictequal(J: *mut js_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn js_instanceof(J: *mut js_State) -> ::std::os::raw::c_int;
}
